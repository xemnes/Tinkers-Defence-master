package lance5057.tDefence.core.library;

import lance5057.tDefence.core.materials.stats.ArmorMaterialStats;
import lance5057.tDefence.core.materials.stats.ShieldMaterialStats;
import lance5057.tDefence.core.tools.bases.ArmorCore;
import lance5057.tDefence.core.tools.bases.ShieldCore;
import net.minecraft.nbt.NBTTagCompound;
import slimeknights.tconstruct.library.materials.ExtraMaterialStats;
import slimeknights.tconstruct.library.materials.HandleMaterialStats;
import slimeknights.tconstruct.library.tools.ToolCore;
import slimeknights.tconstruct.library.utils.Tags;

public class ShieldNBT {

	public int durability;
	public float percentBlocked;
	public int modifiers; // free modifiers
	private final NBTTagCompound parent;

	public ShieldNBT() {
		durability = 0;
		percentBlocked = 0;
		modifiers = 5;
		parent = new NBTTagCompound();
	}

	public ShieldNBT(NBTTagCompound tag) {
		read(tag);
		parent = tag;
	}

	/** Initialize the stats with the heads. CALL THIS FIRST */
	public ShieldNBT head(ShieldCore shield, ShieldMaterialStats... heads) {
		durability = 0;
		percentBlocked = 0;

		// average all stats
		for (ShieldMaterialStats head : heads) {
			if (head != null) {
				durability += head.durability * 1.5;
				percentBlocked += head.percentBlocked * shield.PercentBlockedMultiplier();
			}
		}

		durability = Math.max(1, durability / heads.length);
		percentBlocked /= (float) heads.length;

		return this;
	}

	/** Add stats from the accessoires. Call this second! */
	public ShieldNBT extra(ExtraMaterialStats... extras) {
		int dur = 0;
		for (ExtraMaterialStats extra : extras) {
			if (extra != null) {
				dur += extra.extraDurability;
			}
		}
		this.durability += Math.round((float) dur / (float) extras.length);

		return this;
	}

	/** Calculate in handles. call this last! */
	public ShieldNBT handle(HandleMaterialStats... handles) {
		// (Average Head Durability + Average Extra Durability) * Average Handle
		// Modifier + Average Handle Durability

		int dur = 0;
		float modifier = 0f;
		for (HandleMaterialStats handle : handles) {
			if (handle != null) {
				dur += handle.durability;
				modifier += handle.modifier;
			}
		}

		modifier /= (float) handles.length;
		this.durability = Math.round((float) this.durability * modifier);

		// add in handle durability change
		this.durability += Math.round((float) dur / (float) handles.length);

		this.durability = Math.max(1, this.durability);

		return this;
	}

	public void read(NBTTagCompound tag) {
		durability = tag.getInteger(Tags.DURABILITY);
		percentBlocked = tag.getFloat(ArmorTags.PercentBlocked);
		modifiers = tag.getInteger(Tags.FREE_MODIFIERS);

	}

	public void write(NBTTagCompound tag) {
		tag.setInteger(Tags.DURABILITY, durability);
		tag.setFloat(ArmorTags.PercentBlocked, percentBlocked);
		tag.setInteger(Tags.FREE_MODIFIERS, modifiers);
	}

	public NBTTagCompound get() {
		NBTTagCompound tag = parent.copy();
		write(tag);

		return tag;
	}

	// AUtogenerated equals and hashcode
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}

		ShieldNBT toolNBT = (ShieldNBT) o;

		if (durability != toolNBT.durability) {
			return false;
		}
		if (Float.compare(toolNBT.percentBlocked, percentBlocked) != 0) {
			return false;
		}

		return modifiers == toolNBT.modifiers;

	}

	@Override
	public int hashCode() {
		int result = durability;
		result = 31 * result + (percentBlocked != +0.0f ? Float.floatToIntBits(percentBlocked) : 0);
		result = 31 * result + modifiers;
		return result;
	}
}